package leetcode

import "math"

func minMalwareSpread(graph [][]int, initial []int) int {
	if len(initial) == 0 {
		return 0
	}
	uf, minIndex, count, countMap := UnionFind{}, 0, math.MinInt64, map[int]int{}
	uf.init(len(graph))
	for i := range graph {
		for j := range graph[i] {
			if i == j {
				break
			}
			if graph[i][j] == 1 {
				uf.union(i, j)
			}
		}
	}
	for i := 0; i < len(graph); i++ {
		countMap[uf.find(i)]++
	}
	for _, v := range initial {
		tmp := countMap[uf.find(v)]
		if count == tmp && minIndex > v {
			minIndex = v
		}
		if count < tmp {
			minIndex = v
			count = tmp
		}
	}
	return minIndex
}
